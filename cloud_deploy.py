#!/usr/bin/env python3
"""
üöÄ Cloud Deployment Script –¥–ª—è Time Tracker
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å–∞–π—Ç–∞ –∏ Telegram –±–æ—Ç–∞ –Ω–∞ –æ–±–ª–∞—á–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∏ –±–æ—Ç–∞
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
- Health checks
- –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
- Graceful shutdown
"""

import os
import sys
import subprocess
import signal
import time
import threading
import logging
import requests
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('cloud_deploy.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class CloudDeployer:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º –Ω–∞ –æ–±–ª–∞—á–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""

    def __init__(self):
        self.website_process: Optional[subprocess.Popen] = None
        self.bot_process: Optional[subprocess.Popen] = None
        self.monitoring_thread: Optional[threading.Thread] = None
        self.running = False
        self.restart_count = {"website": 0, "bot": 0}
        self.max_restarts = 5
        self.restart_window = timedelta(minutes=5)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.config = {
            "website_port": int(os.getenv("PORT", "8001")),
            "website_host": os.getenv("HOST", "0.0.0.0"),
            "domain": os.getenv("DOMAIN", "localhost"),
            "health_check_interval": 30,  # —Å–µ–∫—É–Ω–¥
            "max_restart_attempts": 5,
            "restart_delay": 10,  # —Å–µ–∫—É–Ω–¥
        }

    def setup_environment(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
            required_files = ["app/main.py", "bot_runner.py", "requirements.txt"]
            for file_path in required_files:
                if not Path(file_path).exists():
                    logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {file_path}")
                    return False

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
            os.environ.setdefault("ENVIRONMENT", "production")
            os.environ.setdefault("HOST", self.config["website_host"])
            os.environ.setdefault("PORT", str(self.config["website_port"]))
            os.environ.setdefault("DOMAIN", self.config["domain"])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
            if not Path(".env").exists():
                logger.warning("‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –±–∞–∑–æ–≤—ã–π...")
                self.create_env_file()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
            bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
            if not bot_token:
                logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
                logger.info("üí° –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env —Ñ–∞–π–ª")
                return False

            logger.info("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
            return False

    def create_env_file(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±–ª–∞–∫–∞"""
        env_content = f"""# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
ENVIRONMENT=production
HOST={self.config["website_host"]}
PORT={self.config["website_port"]}
DOMAIN={self.config["domain"]}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (SQLite –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ PostgreSQL)
DATABASE_URL=sqlite:///./time_tracker.db

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏–∑–º–µ–Ω–∏—Ç–µ!)
SECRET_KEY={os.urandom(32).hex()}

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ö–æ—Å—Ç—ã
ALLOWED_HOSTS={self.config["domain"]},localhost,127.0.0.1

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_LEVEL=INFO

# Telegram –±–æ—Ç (–¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω!)
TELEGRAM_BOT_TOKEN=your_bot_token_here

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±–ª–∞–∫–∞
CLOUD_DEPLOYMENT=true
HEALTH_CHECK_ENABLED=true
AUTO_RESTART=true
"""

        with open(".env", "w", encoding="utf-8") as f:
            f.write(env_content)

        logger.info("üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")

    def install_dependencies(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        logger.info("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º pip
            subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "pip"],
                         check=True, capture_output=True)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"],
                         check=True, capture_output=True)

            logger.info("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True

        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            return False

    def start_website(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")

        try:
            uvicorn_args = [
                sys.executable, "-m", "uvicorn",
                "app.main:app",
                "--host", self.config["website_host"],
                "--port", str(self.config["website_port"]),
                "--workers", "2",  # –î–ª—è –æ–±–ª–∞–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–µ –≤–æ—Ä–∫–µ—Ä–æ–≤
                "--access-log",
                "--log-level", "info",
                "--timeout-keep-alive", "30",
                "--limit-concurrency", "100",
                "--limit-max-requests", "500"
            ]

            self.website_process = subprocess.Popen(
                uvicorn_args,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )

            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            time.sleep(3)

            if self.website_process.poll() is None:
                logger.info(f"‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{self.config['website_host']}:{self.config['website_port']}")
                return True
            else:
                stdout, stderr = self.website_process.communicate()
                logger.error(f"‚ùå –í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è: {stderr}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False

    def start_bot(self) -> bool:
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")

        try:
            self.bot_process = subprocess.Popen(
                [sys.executable, "bot_runner.py"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )

            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            time.sleep(2)

            if self.bot_process.poll() is None:
                logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
                return True
            else:
                stdout, stderr = self.bot_process.communicate()
                logger.error(f"‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è: {stderr}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return False

    def health_check_website(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            url = f"http://localhost:{self.config['website_port']}/health"
            response = requests.get(url, timeout=5)
            return response.status_code == 200
        except:
            return False

    def health_check_bot(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞)"""
        if self.bot_process and self.bot_process.poll() is None:
            return True
        return False

    def restart_service(self, service_name: str) -> bool:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
        logger.warning(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ {service_name}...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
        if self.restart_count[service_name] >= self.max_restarts:
            logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –¥–ª—è {service_name}")
            return False

        self.restart_count[service_name] += 1

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        if service_name == "website" and self.website_process:
            self.website_process.terminate()
            self.website_process.wait()
            time.sleep(2)
            return self.start_website()
        elif service_name == "bot" and self.bot_process:
            self.bot_process.terminate()
            self.bot_process.wait()
            time.sleep(2)
            return self.start_bot()

        return False

    def monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üëÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")

        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
                if not self.health_check_website():
                    logger.warning("‚ö†Ô∏è –í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ health check")
                    if not self.restart_service("website"):
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä")
                else:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
                    self.restart_count["website"] = 0

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞
                if not self.health_check_bot():
                    logger.warning("‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    if not self.restart_service("bot"):
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
                else:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
                    self.restart_count["bot"] = 0

                time.sleep(self.config["health_check_interval"])

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(5)

    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.monitoring_thread = threading.Thread(target=self.monitoring_loop, daemon=True)
        self.monitoring_thread.start()
        logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")

    def stop_services(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")

        self.running = False

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        if self.website_process:
            try:
                self.website_process.terminate()
                self.website_process.wait(timeout=10)
                logger.info("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except:
                self.website_process.kill()
                logger.info("‚ö†Ô∏è –í–µ–±-—Å–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        if self.bot_process:
            try:
                self.bot_process.terminate()
                self.bot_process.wait(timeout=10)
                logger.info("‚úÖ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except:
                self.bot_process.kill()
                logger.info("‚ö†Ô∏è Telegram –±–æ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("=" * 60)
        logger.info("üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ TIME TRACKER")
        logger.info("=" * 60)
        logger.info(f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if self.website_process and self.website_process.poll() is None else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        logger.info(f"ü§ñ Telegram –±–æ—Ç: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if self.bot_process and self.bot_process.poll() is None else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        logger.info(f"üëÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if self.monitoring_thread and self.monitoring_thread.is_alive() else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {self.restart_count['website']}")
        logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∏ –±–æ—Ç–∞: {self.restart_count['bot']}")
        logger.info(f"üåê URL: http://{self.config['domain']}:{self.config['website_port']}")
        logger.info(f"üìä –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: http://{self.config['domain']}:{self.config['website_port']}/admin")
        logger.info("=" * 60)

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Time Tracker –Ω–∞ –æ–±–ª–∞—á–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ...")
        logger.info(f"üåê –î–æ–º–µ–Ω: {self.config['domain']}")
        logger.info(f"üîå –ü–æ—Ä—Ç: {self.config['website_port']}")

        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if not self.setup_environment():
                return

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            if not self.install_dependencies():
                return

            # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
            if not self.start_website():
                return

            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            if not self.start_bot():
                logger.warning("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –Ω–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")

            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.running = True
            self.start_monitoring()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            self.show_status()

            logger.info("üéâ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            logger.info("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            while self.running:
                try:
                    time.sleep(1)

                    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
                    if int(time.time()) % 300 == 0:  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                        self.show_status()

                except KeyboardInterrupt:
                    logger.info("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
                    break

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.stop_services()
            logger.info("üëã –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    def signal_handler(signum, frame):
        logger.info(f"\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        sys.exit(0)

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    # –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ–µ—Ä–∞
    deployer = CloudDeployer()
    deployer.run()

if __name__ == "__main__":
    main()